The thing I wanted to talk about today, one of the things, is the coolness that is public private key cryptography. The basic idea of how it works, I think, is just cool. It's such a clever idea. I wanted to explain it. So everyone's familiar with the basic idea of crypto, where you have a secret key. You use that to encode some information, which converts it from a readable form into garbage, effectively. It looks like random noise. You then transfer that to somebody else, and they are then able to decrypt it and get the message out. And anyone who's listening in on your communication isn't able to find out anything about the information that you're communicating. The way that you intuitively think about it, especially if you're doing these simple codes, something like a Caesar cipher that you might do when you're a kid, there's one secret that you both have. This is a symmetric system. So you've got your message, you're saying hello, and then you do some process to it to convert it using a key that's some secret piece of information, which then converts this into nonsense. And then you send this to the other person, and they decrypt it with a process that's kind of this same process in reverse, using the same key. And then they get hello back out the other end. And that's nice and simple, and it works. And it was once sort of the only way that people did things. But it has a problem, which is you both need to know what this key is. So if it's you and me, and we want to communicate with one another privately, we have to agree on a key that nobody else is going to be able to guess, and we have to share it with one another. So we might meet in the park in secret and exchange envelopes or whatever. This is the kind of thing spies used to do, right? And the problem with that is, firstly, it's very inconvenient. And secondly, sometimes you can't do it. We might be physically separated, or we want to do something over the internet, maybe we've never met. And the problem is, how do I send this key to you without just sending the key in the clear, as it were, unencrypted? In order for us to share the key safely, we need a secure encrypted connection. But we can't establish a secure encrypted connection without a key. There's a way of solving this problem, which is asymmetric encryption, where what you do is you generate two keys, key A and key B, let's just call them. I'm going to draw a line here. Asymmetric system, you have two keys. And then basically, it's the same as before. You've got your message that says hello. You encrypt it with key A to say whatever it was that I decided it was before. And then back out, you get hello again. And the decryption in this case uses key B. You can't guess one key from the other. But they're linked in such a way that anything you encrypt with key A can only be decrypted with key B. And anything you encrypt with key B can only be decrypted with key A. So there's two. And what you do is you generate a pair of these keys, which is called a key pair. And you just pick one of them and say, this is my public key. And your public key is public. You publish it everywhere. You put it on the end of all your emails, your forum posts. You upload it to a key server, which is a specialized server system that's designed for securely storing people's public keys. Basically, the idea is it's everywhere out there in the world with your name on it. The private key is the other key of this pair. That one you keep absolutely secret. You can do some cool things with this once you have this system set up. I have a key pair. You have a key pair. We both have one another's public keys. So now, if you want to send me a message, I don't have to share anything with you. You just know my public key, encrypt something with my public key, send it to me. You know I can decrypt it because you know I have my private key. And then there's another thing you can do with this, which is if I encrypt something with my private key and then publish it, now, on the surface of it, you'd think, well, what is the point of encrypting it with your private key? Because your public key is out there, so anyone can decrypt it, so why bother encrypting it? But the fact that it can be decrypted with your public key means that it must have been encrypted with your private key, which means it must have been you who made the message because only you have your private key. Cryptographically, you can be certain that it's an authentic message, really, from that person. So the best thing is when I do both, where I encrypt something with my private key and then your public key and then send it to you. And if we communicate like this, I know that nobody else can read the message, you know that nobody else can read the message. You know that the message has come from me and not an imposter. You also know that the message hasn't been modified because any modification to the message also requires the keys. That's a great secure system and we didn't have to meet up in the park in a shifty way and exchange any information or anything. We need never have met. I need to make clear here that I have oversimplified in various ways. People who understand cryptography will be quite upset probably right now, but guys, this is why people don't use crypto because we make it too complicated. The core concept is simple and this stuff isn't difficult to use and everyone should. When you put an envelope in the post, you lick the thing and seal it. And if it's been opened, people know it's been opened and there are laws about this and we have all of this stuff. And when you communicate in the clear, anyone and his dog can know exactly what you're sending to everyone and there's no reason to allow that. There are various ways in which what I've done here is a simplification and there are some ways in which it's an oversimplification. And if you want more details, just look down in my trousers where there's a lot of commenters who will have gone into... Well, you don't need to actually zoom in on it. I mean, there's a lot of commenters who will have gone into more detail than you wanted about exactly how this stuff works. And it is really interesting, but the basic idea is simple. 