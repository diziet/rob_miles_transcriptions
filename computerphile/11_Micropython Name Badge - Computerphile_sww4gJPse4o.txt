I was just recently at the Electromagnetic Field Festival, which is an amazing hacker-maker festival, camping festival though. So it's in a field, electromagnetic field. It's a great name, it's a quality name. Something that they always do at EMF is they hand out badges and because it's a maker festival, the badges are actually little electronic devices. It's a fairly sophisticated machine. It's got a lot of features. Obviously it has the screen, but it also has Wi-Fi. It in fact has an app library and these are all downloaded over the Wi-Fi and installed. Like, let's install a game. What should we do? Pong. Oh, okay, yeah, yeah. So I've got to move my bat by tilting. Oh dear, I'm losing. Most of these apps were developed actually at the festival or shortly afterwards. And the reason that it was so easy to make all of these apps is because the board uses MicroPython, which is something which I hadn't used before and I thought, and there's no Computerphile video about it, so I thought I would just talk a little bit about it as a way of programming microcontrollers. So the most common hobby, small computing type things are obviously the Arduino and the Raspberry Pi. The Arduino is designed to be extremely easy to use and it is relative to the microcontrollers that came before it. But you still have to write C code, which is not the easiest language for beginners to pick up. It's got a few complexities and some gotchas there, which any language has. C is a tricky language in many ways. Whereas this is a microcontroller that you can program in Python. And so previously if you wanted to have a small computer running Python, probably the way you'd do it is to use a Raspberry Pi. But a Raspberry Pi obviously is a much bigger deal. It's a fully fledged computer. You could put a real operating system on there or even something like Windows if you wanted to. I don't judge if you wanted to do that. Your own Raspberry Pi in your own time. Behind closed doors, you know, it's fine. But the point is having a whole operating system is just a whole bunch of extra complexity, which is unnecessary for a lot of small microcontroller type tasks. So it's nice to have a system that you can literally just put a Python file on and it runs directly with no appreciable operating system underneath. It's just Python on a microcontroller. It was a kickstarter a couple of years ago. They developed this interpreter to allow Python to run on microcontrollers and then also a board specifically designed for this, which you can buy. But it's open source. So there are a few different boards that can run it, including this, the tilde. But obviously you can't buy these, I don't think. You only get them by going to EMF. So it's kind of a bit like the Arduino model, is it? Right, quite similar to an Arduino, yeah. Anyone could buy, everyone could make their own, but sometimes it might be easier just to buy one that they're making or something like that. Yeah, yeah. And it's just, it's like a standard, I suppose, that once that's defined, then anybody can make their own chip or they can port MicroPython to a different chip. And there's a bunch of different boards that it can run on. Let's just write hello world to type an application. You just plug it in with USB. This is actually the one I use to charge my phone. This is the thing I like about this, actually, is the simplicity of it. You plug it in, it just registers itself just like a memory stick or anything else that you've plugged in as USB storage. And then you get, you know, a directory. Just dump a Python file in there, I think call it main.py, and it will run it. And that's all there is to it. With the tilde, with this badge. Tilde, is that the name of the badge? Yes. Previous ones were actually shaped like a tilde character. And yeah, because it has this app system, it's a little bit more complicated, but not much. You just have to make your Python file in a particular directory and give it a little header. The standard thing for an Arduino is blink, right? Where you have the LED and you turn it on and off every half second. That's the tutorial thing. So let's do that. Fill in some details here. I am Robert Miles. This program will be called Hello World. There's a sort of a, I don't know if you'd call it an operating system, there's a little interface that the badge comes with that lets you navigate through and select which app you want to launch and that kind of thing. So it needs to know what the app is called and that kind of thing. If you get a regular, like a Pi board, the one from the Kickstarter or any of those, I believe you just put the file on and it runs it and that's the end of it. Here's the header stuff. And then we're importing a library. Pi B is this library which contains stuff for interacting with the board's hardware. So we're just initializing this LED variable to be LED 1, this little one, the one next to the one that's currently flashing, LED A. And then we just have a while loop, toggle the LED, wait 500 milliseconds, which is half a second. And that is it. All we need to do is put this file in a directory called Hello World or whatever in the app directory. And that's it. Save that. Unmount it. Very important to safely remove hardware. Don't just yank out your USB devices willy-nilly. Usually I'd say life is too short for that kind of thing. And there we are. So now we're running it. The light is blinking. Success. But obviously this board is capable of a lot more. It's got this nice screen. Let's put something on the screen. Again, there's this nice graphics library. You have to initialize it. And then I think you can just do, this is from memory, I think you just do that and then you give it the coordinates you want to write at the text and the color, which are just in there as constants. And I think that should do it. So we restart the board and then we can just, I'm editing this on the board itself. Like this file, I have it open on the external drive, which is the board. So you can do all of your development right there on the board. Unmount it again. Restart. Yeah. And now it says Hello World. And the blinking light still. So it's really that simple. Arduino is pretty simple, but this is easier. And then of course you have the Python language, which is a wonderful, powerful and easy to use language, which I highly recommend to anyone. The board itself has a bunch of features. Firstly, output pins for all kinds of different things. So the idea is you can use this board, much like you would an Arduino, to drive some other electronics. These connectors around the edge here are designed for conductive thread. So if you wanted to make some kind of clothing that does something fancy with your badge built into it, you can do that. Somewhat bizarrely, these contacts here are for four servo motors. So you could drive servos with it. There's four of them. If you wanted to make a drone, possibilities are endless. It's the ZomboCom of boards. You know, the only limit is yourself. And there's a competition for people who went to EMF who can do the coolest thing with the badge before next time. I'm not sure if I'm going to enter that. But I did try making an app. I wrote a Solitaire game because I was having fun with the graphics libraries and I wanted to see if I could draw the different cards and stuff. I don't like Solitaire. So I only did the best bit. This is the good bit of Solitaire, the bouncing cards. So we've got Windows 3.1 references mixed in with war games, mixed in with your sense of humour. Yeah, exactly. I just wanted to see if I could do it. So have you drawn those cards and everything, or are they in the libraries? No, yeah. In fact, these are all drawn with the basic drawing functions. So fill rectangle or fill polygon, that kind of thing. Simple. I can show you the program, actually. This is my Solitaire program. So this is the same delay function we were using before. And define the cards. I don't have face cards yet. I don't have the Jack, Queen, and King. That requires more artistic skill than I'm able to bring to bear right now. And also the thing I like about it right now is it's one file. I don't have any external images to copy in or anything. Basic stuff. None of it's complicated. And you expose the plastic at the surface in particular regions according to the pattern. And the important thing is when this particular polymer is exposed to light, it becomes soluble. The regions that aren't exposed aren't soluble. 